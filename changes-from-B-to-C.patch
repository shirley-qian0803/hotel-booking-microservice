diff --git a/hotel-management/build.gradle b/hotel-management/build.gradle
index 0fa0846..b73911b 100644
--- a/hotel-management/build.gradle
+++ b/hotel-management/build.gradle
@@ -26,6 +26,10 @@ dependencies {
 	implementation 'org.springframework.boot:spring-boot-starter-security'
 	implementation 'org.springframework.boot:spring-boot-starter-web'
 	implementation 'org.springframework.boot:spring-boot-starter-webflux'
+
+	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
+	implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.16.1'
+
 	compileOnly 'org.projectlombok:lombok'
 	runtimeOnly 'com.mysql:mysql-connector-j'
 	annotationProcessor 'org.projectlombok:lombok'
diff --git a/hotel-management/src/main/java/com/jiayi/hotelmanagement/controller/HotelController.java b/hotel-management/src/main/java/com/jiayi/hotelmanagement/controller/HotelController.java
index 0e40044..dd970fa 100644
--- a/hotel-management/src/main/java/com/jiayi/hotelmanagement/controller/HotelController.java
+++ b/hotel-management/src/main/java/com/jiayi/hotelmanagement/controller/HotelController.java
@@ -3,14 +3,19 @@ package com.jiayi.hotelmanagement.controller;
 
 import com.jiayi.hotelmanagement.dto.HotelRequest;
 import com.jiayi.hotelmanagement.dto.HotelResponse;
+import com.jiayi.hotelmanagement.model.Address;
 import com.jiayi.hotelmanagement.model.Hotel;
 import com.jiayi.hotelmanagement.repository.HotelRepository;
 import com.jiayi.hotelmanagement.service.HotelService;
 import lombok.AllArgsConstructor;
+import org.elasticsearch.geometry.Point;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.geo.Distance;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.*;
 
+import java.util.List;
+
 @RestController
 @RequestMapping("/api/hotel")
 @AllArgsConstructor
@@ -24,7 +29,24 @@ public class HotelController {
 
     @GetMapping("/{hotelId}")
     @ResponseStatus(HttpStatus.OK)
-    public HotelResponse getHotel(@PathVariable Long hotelId){
+    public HotelResponse getHotel(@PathVariable Long hotelId) {
         return hotelService.getHotel(hotelId);
     }
+
+
+    @GetMapping("/list")
+    public List<HotelResponse> listHotels() {
+        return hotelService.listHotels();
+    }
+
+    @GetMapping("/search/nearby")
+    public List<HotelResponse> searchNearBy(@RequestParam double lat, @RequestParam double lon, @RequestParam double radius) {
+        return hotelService.searchNearBy(lat, lon, radius);
+    }
+
+    @GetMapping("/search")
+    public List<HotelResponse> searchByName(@RequestParam String name) {
+        return hotelService.searchByName(name);
+    }
+
 }
diff --git a/hotel-management/src/main/java/com/jiayi/hotelmanagement/model/Hotel.java b/hotel-management/src/main/java/com/jiayi/hotelmanagement/model/Hotel.java
index 165dab2..f23b7db 100644
--- a/hotel-management/src/main/java/com/jiayi/hotelmanagement/model/Hotel.java
+++ b/hotel-management/src/main/java/com/jiayi/hotelmanagement/model/Hotel.java
@@ -1,10 +1,14 @@
 package com.jiayi.hotelmanagement.model;
 
+import co.elastic.clients.elasticsearch._types.mapping.FieldType;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import org.springframework.data.elasticsearch.annotations.Document;
+import org.springframework.data.elasticsearch.annotations.Field;
+import org.springframework.data.elasticsearch.core.geo.GeoPoint;
 
 import java.sql.Timestamp;
 import java.util.List;
@@ -15,6 +19,7 @@ import java.util.List;
 @NoArgsConstructor
 @AllArgsConstructor
 @Builder
+@Document(indexName = "hotel")
 public class Hotel {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
@@ -24,8 +29,9 @@ public class Hotel {
     private Timestamp createdAt;
     private Timestamp updatedAt;
 
-    @Embedded
-    private Address address;
+    @Field(type = FieldType.GeoPoint)
+    private GeoPoint location;  // GeoPoint uses latitude and longitude
+
     @Column(unique = true)
     private String hotelEmail;
 
diff --git a/hotel-management/src/main/java/com/jiayi/hotelmanagement/repository/HotelElasticRepository.java b/hotel-management/src/main/java/com/jiayi/hotelmanagement/repository/HotelElasticRepository.java
new file mode 100644
index 0000000..7491d15
--- /dev/null
+++ b/hotel-management/src/main/java/com/jiayi/hotelmanagement/repository/HotelElasticRepository.java
@@ -0,0 +1,16 @@
+package com.jiayi.hotelmanagement.repository;
+
+import com.jiayi.hotelmanagement.model.Hotel;
+import org.elasticsearch.geometry.Point;
+import org.springframework.data.elasticsearch.core.geo.GeoPoint;
+import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;
+import org.springframework.data.geo.Distance;
+
+import java.util.List;
+
+public interface HotelElasticRepository extends ElasticsearchRepository<Hotel, String> {
+    List<Hotel> findByNameContaining(String name);
+
+    List<Hotel> findByLocationNear(GeoPoint location, Distance distance);
+
+}
diff --git a/hotel-management/src/main/java/com/jiayi/hotelmanagement/service/HotelService.java b/hotel-management/src/main/java/com/jiayi/hotelmanagement/service/HotelService.java
index 5967e64..7e0025d 100644
--- a/hotel-management/src/main/java/com/jiayi/hotelmanagement/service/HotelService.java
+++ b/hotel-management/src/main/java/com/jiayi/hotelmanagement/service/HotelService.java
@@ -5,13 +5,22 @@ import com.jiayi.hotelmanagement.dto.HotelResponse;
 import com.jiayi.hotelmanagement.dto.RoomResponse;
 import com.jiayi.hotelmanagement.model.Hotel;
 import com.jiayi.hotelmanagement.model.Room;
+import com.jiayi.hotelmanagement.repository.HotelElasticRepository;
 import com.jiayi.hotelmanagement.repository.HotelRepository;
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
+import org.elasticsearch.geometry.Point;
+import org.springframework.data.elasticsearch.core.geo.GeoPoint;
+import org.springframework.data.geo.Distance;
+import org.springframework.data.geo.Metrics;
 import org.springframework.stereotype.Service;
-import com.jiayi.hotelmanagement.service.RoomService;
+import org.springframework.web.bind.annotation.RequestParam;
 
 import java.sql.Timestamp;
+import java.util.Iterator;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
 
 @Service
 @AllArgsConstructor
@@ -19,9 +28,11 @@ import java.sql.Timestamp;
 public class HotelService {
 
     private HotelRepository hotelRepository;
+    private HotelElasticRepository hotelElasticRepository;
+
     public HotelResponse createHotel(HotelRequest hotelRequest) {
         // check the hotel is not created(no similar email)
-        if (hotelRepository.findByHotelEmail(hotelRequest.getHotelEmail()).isPresent()){
+        if (hotelRepository.findByHotelEmail(hotelRequest.getHotelEmail()).isPresent()) {
             throw new IllegalArgumentException("The hotel is already created");
         }
         Hotel hotel = Hotel
@@ -44,7 +55,7 @@ public class HotelService {
         return makeHotelResponse(hotel);
     }
 
-    private HotelResponse makeHotelResponse(Hotel hotel){
+    private HotelResponse makeHotelResponse(Hotel hotel) {
         return HotelResponse
                 .builder()
                 .name(hotel.getName())
@@ -70,4 +81,23 @@ public class HotelService {
                 .updatedAt(room.getUpdatedAt())
                 .build();
     }
+
+    public List<HotelResponse> listHotels() {
+        Iterable<Hotel> iterable = hotelElasticRepository.findAll();  // Convert the Iterator to an Iterable
+        return StreamSupport.stream(iterable.spliterator(), false) // Create a Stream from the Iterable
+                .map(this::makeHotelResponse)           // Map each Hotel to a HotelResponse
+                .collect(Collectors.toList());          // Collect into a List
+    }
+
+
+    public List<HotelResponse> searchNearBy(double lat, double lon, double radius) {
+        Distance distance = new Distance(radius, Metrics.KILOMETERS);
+        GeoPoint geoPoint = new GeoPoint(lat, lon);
+        return hotelElasticRepository.findByLocationNear(geoPoint,distance).stream().map(this::makeHotelResponse).toList();
+    }
+
+    public List<HotelResponse> searchByName(String name) {
+        return hotelElasticRepository.findByNameContaining(name).stream().map(this::makeHotelResponse).toList();
+    }
+
 }
diff --git a/hotel-management/src/main/resources/application.properties b/hotel-management/src/main/resources/application.properties
index fdc7130..14dc9d6 100644
--- a/hotel-management/src/main/resources/application.properties
+++ b/hotel-management/src/main/resources/application.properties
@@ -12,4 +12,8 @@ spring.datasource.password=shirley050803
 
 # ORM s/w specific properties
 spring.jpa.hibernate.ddl-auto=update
-spring.jpa.show-sql=true
\ No newline at end of file
+spring.jpa.show-sql=true
+
+# Elastic Search
+spring.data.elasticsearch.repositories.enabled=true
+spring.elasticsearch.uris=http://localhost:9200
\ No newline at end of file
diff --git a/security/build.gradle b/security/build.gradle
index 9553b0c..caa314f 100644
--- a/security/build.gradle
+++ b/security/build.gradle
@@ -21,9 +21,19 @@ repositories {
 	mavenCentral()
 }
 
+jar {
+	archivesBaseName = 'common-security'
+	version = '1.0.0'
+}
+
 dependencies {
 	implementation 'org.springframework.boot:spring-boot-starter-security'
 	implementation 'org.springframework.boot:spring-boot-starter-web'
+
+	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
+	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
+	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
+
 	compileOnly 'org.projectlombok:lombok'
 	annotationProcessor 'org.projectlombok:lombok'
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
diff --git a/security/src/main/java/com/jiayi/security/config/ApplicationConfig.java b/security/src/main/java/com/jiayi/security/config/ApplicationConfig.java
new file mode 100644
index 0000000..19be3e5
--- /dev/null
+++ b/security/src/main/java/com/jiayi/security/config/ApplicationConfig.java
@@ -0,0 +1,40 @@
+package com.jiayi.security.config;
+
+import com.jiayi.usermanagement.repository.UserRepository;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.AuthenticationProvider;
+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
+import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+
+@Configuration
+@RequiredArgsConstructor
+public class ApplicationConfig {
+
+    @Bean
+    public AuthenticationProvider authenticationProvider(){
+        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
+        authenticationProvider.setUserDetailsService(userDetailsService());
+        authenticationProvider.setPasswordEncoder(passwordEncoder());
+        return authenticationProvider;
+    }
+
+    // also create an authenticationManager to use it later on
+    @Bean
+    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
+        return configuration.getAuthenticationManager();
+    }
+
+    @Bean
+    public PasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+}
diff --git a/user-management/src/main/java/com/jiayi/usermanagement/config/JwtAuthenticationFilter.java b/security/src/main/java/com/jiayi/security/config/JwtAuthenticationFilter.java
similarity index 98%
rename from user-management/src/main/java/com/jiayi/usermanagement/config/JwtAuthenticationFilter.java
rename to security/src/main/java/com/jiayi/security/config/JwtAuthenticationFilter.java
index 070742a..7e37c76 100644
--- a/user-management/src/main/java/com/jiayi/usermanagement/config/JwtAuthenticationFilter.java
+++ b/security/src/main/java/com/jiayi/security/config/JwtAuthenticationFilter.java
@@ -1,4 +1,4 @@
-package com.jiayi.usermanagement.config;
+package com.jiayi.security.config;
 
 import jakarta.servlet.FilterChain;
 import jakarta.servlet.ServletException;
diff --git a/user-management/src/main/java/com/jiayi/usermanagement/config/JwtService.java b/security/src/main/java/com/jiayi/security/config/JwtService.java
similarity index 98%
rename from user-management/src/main/java/com/jiayi/usermanagement/config/JwtService.java
rename to security/src/main/java/com/jiayi/security/config/JwtService.java
index 9b9eb50..747ca20 100644
--- a/user-management/src/main/java/com/jiayi/usermanagement/config/JwtService.java
+++ b/security/src/main/java/com/jiayi/security/config/JwtService.java
@@ -1,4 +1,4 @@
-package com.jiayi.usermanagement.config;
+package com.jiayi.security.config;
 
 import io.jsonwebtoken.Claims;
 import io.jsonwebtoken.Jwts;
diff --git a/user-management/src/main/java/com/jiayi/usermanagement/config/SecurityConfig.java b/security/src/main/java/com/jiayi/security/config/SecurityConfig.java
similarity index 97%
rename from user-management/src/main/java/com/jiayi/usermanagement/config/SecurityConfig.java
rename to security/src/main/java/com/jiayi/security/config/SecurityConfig.java
index 2c34a4d..26c28e3 100644
--- a/user-management/src/main/java/com/jiayi/usermanagement/config/SecurityConfig.java
+++ b/security/src/main/java/com/jiayi/security/config/SecurityConfig.java
@@ -1,6 +1,5 @@
-package com.jiayi.usermanagement.config;
+package com.jiayi.security.config;
 
-import lombok.Builder;
 import lombok.RequiredArgsConstructor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
diff --git a/user-management/src/main/java/com/jiayi/usermanagement/config/ApplicationConfig.java b/user-management/src/main/java/com/jiayi/usermanagement/config/ApplicationConfig.java
index 8056f8f..1bff9a8 100644
--- a/user-management/src/main/java/com/jiayi/usermanagement/config/ApplicationConfig.java
+++ b/user-management/src/main/java/com/jiayi/usermanagement/config/ApplicationConfig.java
@@ -1,46 +1,19 @@
 package com.jiayi.usermanagement.config;
 
 import com.jiayi.usermanagement.repository.UserRepository;
-import lombok.RequiredArgsConstructor;
+import lombok.AllArgsConstructor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.authentication.AuthenticationProvider;
-import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
-import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
-import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.security.crypto.password.PasswordEncoder;
 
 @Configuration
-@RequiredArgsConstructor
+@AllArgsConstructor
 public class ApplicationConfig {
-
     private final UserRepository userRepository;
     @Bean
     public UserDetailsService userDetailsService(){
         return username -> userRepository.findByEmail(username)
                 .orElseThrow(() -> new UsernameNotFoundException("User not found"));
     }
-
-    @Bean
-    public AuthenticationProvider authenticationProvider(){
-        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
-        authenticationProvider.setUserDetailsService(userDetailsService());
-        authenticationProvider.setPasswordEncoder(passwordEncoder());
-        return authenticationProvider;
-    }
-
-    // also create an authenticationManager to use it later on
-    @Bean
-    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
-        return configuration.getAuthenticationManager();
-    }
-
-    @Bean
-    public PasswordEncoder passwordEncoder() {
-        return new BCryptPasswordEncoder();
-    }
 }
